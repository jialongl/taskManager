class Task{ // Done!!

	deadline [99999999]
	priority [0] -10~10
	description
	cronFreq [0]
	cronTill  // deprecated -- every cron task is added upon completion of the previous cron task
	bool isFinished [false]
	int serialNumber
	string group

	setPriority()
	setDescription()
	setDeadline()
	setGroup()
	setCronFreq()
	setSerialNumber()
	setIsFinished()
	bool matchKeyword() //ls <*keyword?>

	getDeadline()
	getPriority()
	getDescription()
	getCronFreq()
	getCronTill()  // deprecated -- every cron task is added upon completion of the previous cron task
	getIsFinished()
	getSerialNumber()
	getGroup()
}

class CronTask inherits Task{
	int cronIdx
}

class Command{ //Done!!!
	method		enum
	taskDescription	string
	deadline	datetime
	priority	int
	group		string
	cronFreq	int //second
	sortKeyword 	vector of enum Field
	serialNumberList	vector of int
	finished	bool
	filename	string
	html		bool
}

class Parser {
	intputToCommand()
	resultToOutput()
}

class Shell{ //Done!!!!
	start()
}

class CommandExecutor{// Done!!!
	executeCommand()
}

class MainCmdExecutor implements CommandExecutor{
	commandExecutorList
	Map <method, commandExecutor>

	executeCommand(method, commandExecutorList) //choose subCommandExecutor
}

class SubCommandExecutor implements CommandExecutor{ // Done: Add,Finish
	executeCommand(subCommandExecutor, Command) 
}

class TaskList{ //Done!!
	private taskList	map from serialNumber to Tasks
	
	int addTask(Task*) // returns serial number
	int addTask(SerialNumber, Task*)
	removeTask()
	TaskList getTasks(filter)
	editTaskDescription(serialNum,newDescription)
	editTask...
	...
	getTaskMap() //return taskMap
	
	vector<Task*> sort(Comparer*);
}

class Result inherits TaskList{//Done!!
	bool detailed	//task -n true
	bool isNull
	Comparer* comparer
}

class CronManager{
	cronList //TaskList * cronlist = new TaskList();
	lastTIme
	
	newTasks(timeStart, timeEnd) //add new Task to TaskList from timeStar to timeEnd
				     //set lastTime to currentTime
	setLastTime()
}

class Filter{//Done!!!
	filterType	enum
	bool filter(Task* task)
} 

class GFilter inherits Filter{//Done
	groupNums
}

class KFilter inherits Filter{//Done
	keyword
}

class FFilter inherits Filter{//Done
	finished
}

class OFilter inherits Fliter{//Done
}

class NFilter inherits Filter{//Done
	serialNumber
}

class Comparer{
	bool compare(task1*, task2*);// return whether task1 should be in front of task2.
}

mainLoop(){
	for(;;){
		cin >> cmd;
		Command = Parser->inputToCommand(cmd);
		Result = CommandExecutor(Command);
		Output = Parser->resultToOutput(Result);
		cout << output << endl;
	}
}
	
int main(){
	init() //read data from XML 
		//new objects
	shell->start(); 
	CronManager->newTasks(CronManager->lastTime, currentTime);
	setLastTime(currentTime);
}

everytime after editting export to XML
